'use strict';

var _ = require('lodash');

/**
 * Converts a row into a geojson object
 * @param  {String} row A row of a csv file with columns
 *                      int id, int time, float latitude, float longitude, float speed, float measurement, string quality
 * @return {Object}     An object following the geojson convention
 */
function rowToGeoJSON(row) {

    row = row.split(',');
    if(row.length !== 7) throw new Error('number of columns is '+row.length+'. Expected 7');

    // Remove "" from last column
    row[6] = row[6].slice(1, row[6].length-1);

    //Parse column and create object
    row =  {
        roadstar_id : parseInt(row[0]),
        time : parseInt(row[1]),
        latitude : parseFloat(row[2]),
        longitude : parseFloat(row[3]),
        speed : parseFloat(row[4]),
        measurement : parseFloat(row[5]),
        quality : row[6]
    };

    _.forOwn(row, function(value, key) {
        if(_.isNaN(value)) throw new Error(key+' is NaN');
    });


    return {
        'type' : 'Feature',
        'geometry' : {
            'type' : 'Point',
            'coordinates' : [row.longitude, row.latitude],
        },
        'properties' : {
            'speed' : row.speed,
            'measurement' : row.measurement,
            'quality' : row.quality,
            'roadstarID' : row.roadstar_id
        }
    };
}

function csvToGeoJSON(csvString) {
    csvString = csvString.split("\n");
    csvString = csvString.map(function(row) {
       try {
            return rowToGeoJSON(row);
       } catch (err) {
            console.log('error converting row to GeoJSON: '+err+'. Skipping row');
       }
    });
    csvString = csvString.filter(function(row) { return row; });
    return csvString;
}


module.exports = {
    rowToGeoJSON : rowToGeoJSON,
    csvToGeoJSON : csvToGeoJSON
};